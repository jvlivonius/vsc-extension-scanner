name: Build & Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags: v1.0.0, v2.1.3, etc.

# Restrict permissions to minimum required
permissions:
  contents: write  # Required for creating releases and uploading artifacts

jobs:
  build-and-release:
    name: Build Distribution & Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog extraction

      - name: Extract version from tag
        id: version
        run: |
          # Extract version number from tag (v1.2.3 -> 1.2.3)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Building version: $VERSION"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade build

      - name: Clean build environment
        run: |
          echo "🧹 Cleaning previous build artifacts..."
          rm -rf build/ dist/ *.egg-info
          echo "✅ Build environment clean"

      - name: Build distribution packages
        run: |
          echo "🔨 Building wheel and source distribution..."
          python3 -m build
          echo "✅ Build complete"
          echo ""
          echo "📦 Distribution packages:"
          ls -lh dist/

      - name: Generate checksums
        run: |
          echo "🔐 Generating SHA256 checksums..."
          cd dist/
          shasum -a 256 *.whl *.tar.gz > SHA256SUMS.txt
          echo "✅ Checksums generated"
          echo ""
          cat SHA256SUMS.txt
          cd ..

      - name: Verify package installation
        run: |
          echo "🧪 Testing package installation in isolated environment..."

          # Create test environment
          python3 -m venv test-release-env
          source test-release-env/bin/activate

          # Install from wheel
          WHEEL_FILE=$(ls dist/*.whl)
          pip install "$WHEEL_FILE"

          # Verify version matches tag
          INSTALLED_VERSION=$(vscan --version 2>&1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || echo "unknown")
          EXPECTED_VERSION="${{ steps.version.outputs.version }}"

          echo "Expected version: $EXPECTED_VERSION"
          echo "Installed version: $INSTALLED_VERSION"

          if [ "$INSTALLED_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "❌ Version mismatch!"
            exit 1
          fi

          # Verify basic commands work
          vscan --help > /dev/null
          vscan cache stats > /dev/null || true  # May fail if no cache exists

          # Verify Python import
          python3 -c "import vscode_scanner; print(f'✅ Import successful: {vscode_scanner.__version__}')"

          # Cleanup
          deactivate
          rm -rf test-release-env

          echo "✅ Package verification complete"

      - name: Extract release notes from CHANGELOG
        id: changelog
        run: |
          echo "📝 Extracting release notes from CHANGELOG.md..."

          # Extract section for this version from CHANGELOG.md
          VERSION="${{ steps.version.outputs.version }}"

          # Try to extract changelog section (between ## [VERSION] and next ## or end of file)
          if [ -f "CHANGELOG.md" ]; then
            # Use awk to extract the relevant section
            NOTES=$(awk "/## \[$VERSION\]/,/## \[/{if (/## \[/ && !/## \[$VERSION\]/) exit; print}" CHANGELOG.md | tail -n +2)

            if [ -n "$NOTES" ]; then
              echo "✅ Extracted release notes from CHANGELOG.md"
              # Save to file for release creation
              echo "$NOTES" > release-notes.txt
            else
              echo "⚠️ No release notes found for version $VERSION in CHANGELOG.md"
              echo "Release v$VERSION" > release-notes.txt
            fi
          else
            echo "⚠️ CHANGELOG.md not found"
            echo "Release v$VERSION" > release-notes.txt
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ steps.version.outputs.version }}
          body_path: release-notes.txt
          files: |
            dist/*.whl
            dist/*.tar.gz
            dist/SHA256SUMS.txt
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release summary
        run: |
          echo "# 🎉 Release Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Distribution Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -lh dist/ >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔐 Checksums" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat dist/SHA256SUMS.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ GitHub Release created with artifacts" >> $GITHUB_STEP_SUMMARY
