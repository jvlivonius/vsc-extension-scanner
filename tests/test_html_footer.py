"""
Tests for FooterComponent in HTML Report Generator.

Covers footer generation, version display, and link rendering.
Target: 5 tests, 90% coverage
"""

import unittest
import pytest

from vscode_scanner.html_report.components.footer import FooterComponent


@pytest.mark.unit
class TestFooterComponent(unittest.TestCase):
    """Test suite for FooterComponent with comprehensive coverage."""

    def setUp(self):
        """Set up test fixtures."""
        self.footer = FooterComponent()
        self.valid_summary = {"scan_timestamp": "2024-01-15T10:30:00"}

    def test_render_with_valid_timestamp(self):
        """Test basic footer rendering with valid timestamp."""
        result = self.footer.render(self.valid_summary)

        # Verify structure
        self.assertIn('<footer class="report-footer">', result)

        # Verify timestamp
        self.assertIn("2024-01-15T10:30:00", result)

        # Verify tool name
        self.assertIn("<strong>vscan</strong>", result)

    def test_missing_timestamp_defaults_to_unknown(self):
        """Test footer with missing timestamp uses 'Unknown'."""
        result = self.footer.render({})

        # Should use default
        self.assertIn("Unknown", result)

    def test_html_escaping_in_timestamp(self):
        """Test XSS prevention through HTML escaping."""
        malicious = {"scan_timestamp": '<script>alert("xss")</script>'}
        result = self.footer.render(malicious)

        # Should escape HTML
        self.assertNotIn("<script>", result)
        self.assertIn("&lt;script&gt;", result)

    def test_version_number_present(self):
        """Test that version number from BaseComponent is displayed."""
        result = self.footer.render(self.valid_summary)

        # Verify version is present (format: "v3.5.4" or similar)
        self.assertIn(f"v{self.footer.version}", result)

        # Verify it's in the expected sentence structure
        self.assertIn(
            f"Generated by <strong>vscan</strong> v{self.footer.version}", result
        )

    def test_vscan_dev_link_present(self):
        """Test vscan.dev link is rendered correctly."""
        result = self.footer.render(self.valid_summary)

        # Verify link
        self.assertIn('href="https://vscan.dev"', result)
        self.assertIn('target="_blank"', result)
        self.assertIn("vscan.dev</a>", result)

        # Verify full sentence
        self.assertIn("For more information, visit", result)


if __name__ == "__main__":
    unittest.main()
